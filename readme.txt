見やすいコードの書き方を意識して今回のジャムは参加しました

主に意識したことは
・コメントを書く
  当たり前ですがものすごく大事です
  /を3回、関数や変数の宣言時に打つとsummaryが出ます
  この中に説明を書くと、参照先からもこの説明を見ることができて非常に便利です
  (何より宣言するとこで何してるかわかるのがいい)

・メソッドはできるだけ細かく分ける
  寒河江先生も言っているようなので知っている方が多いかと思いますが、
  とにかく関数の中は短くします
  どんなに短い処理でも一旦分けるのをお勧めします
  上記の「コメントを書く」にもつながる部分ですが、ここで何をしているのかが明確になります
  もしかしたら同じ処理を他でも使うかもしれません
  長ったらしい関数の中でたくさんのローカル変数が宣言されたとします、最後まで覚えてコードをよめますか
  最初は面倒かもしれませんが、一度やるとコードの質が変わるのでぜひやってみてください

・ファイルも細かく分ける
  メソッド同様に、ファイルもできるだけ細かく分けます
  GameManagerにはどんな処理が入っていますか？
  UIの更新、スコアなどのデータ保持、プレイヤーの操作、ゲーム時間の更新
  一つのファイルにまとまっているとバグが起きた際に直すのが死ぬほど大変です
  メソッドのとこでも記述したとおり、変数を全部覚えて読まないといけません
  例えば今回のプロジェクトでは

  GameManager
    L UiContoller
    L PlayerController
      L PlayerModel
    L SunController
      L SunModel
    L GameOption

  こんな感じにGameManagerに全ての責任を持たせず、UIならUIをプレイヤーならプレイヤーの処理を
  責任を持つべきところで持つように設計しています

  今回はMVCアーキテクチャ(っぽいこと)をしています
  細かいところは気になった方で個人で調べていただきたいのですが、ざっくりいうと
  View(視覚)、Model(データ)、Controller(操作)に分けられ、
  Modelに全ての必要なデータを保持させ、コントローラーでModelを操作
  必要な情報を抜き出し、必要な情報を書き換える
  決してModelは対応したController以外からは書き換えてはいけません

  長々と書きましたが、こう細かく分けることにより
  第三者から見てもわかりやすい上に、バグの元を発見しやすいという利点があります
  データが間違っているならModel、処理が間違っているのならControllerだけをみればいい
  って感じです

  「よくわかんねぇよ」って思うと思います
  このプロジェクトの設計のところ、見てみてください
  少しは参考になるかと思います

  ※今回、見た目に変化がないのでViewは使ってません

##まとめ

  見やすいコード、なんとなくわかっていただけたでしょうか
  チームで制作する以上、自分だけわかってても仕方がないです
  コードを読み解く力は当然大切になってきますが、
  "本当の見やすいコード"は"読まなくてもいいコード"です
  コメントを見ればわかる、いちいち凝視しなくても何しているかわかる
  そんなコードがいいコードだと思います

  今書いているコード、1週間後にみて理解できますか？
  「なんかわかんないけど動いてる」「なんかわからないけどバグ治った」
  がないようにいいコードを目指してください

  "リーダブルコード"という本がおすすめです
  プロの方たちも口を揃えていい本だといっています
  先生方に「これ読みたいから買え」っていってみてください

  前回・今回と質問はなかったのでコードを残していきます
  質問しづらい空気？はあると思うのですが僕は全然いつでもウェルカムなので(忙しくて見れないかも)
  寒河江先生にでもLINEもらってなんかあれば聞いてください


23/8/6 Matsushima Hiroi





